////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(num1, num2, step = 1) {
  let output = [];
  if (num1 === num2) {
    return output;
  }
  if (step < 1) {
    return output;
  }
  if (num1 < num2) {
    for (let i = num1; i <= num2; i += step) {
      output.push(i)
    }
    return output
  }
  if (num1 > num2) {
    for (let i = num1; i >= num2; i -= step) {
      output.push(i)
    }
    return output
  }
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(arr) {
  let newArr = arr.reduce((prev, element) => {
    prev += element;
    return prev
  }, 0)
  return newArr
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
  let output = [];
  for (let i = arr.length - 1; i >= 0; i--) {
    output.push(arr[i])
  }
  return output
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arr) {
  let storage = reverseArray(arr);
  for (let i = 0; i < storage.length; i++) {
    arr[i] = storage[i]
  }
  return arr
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(arr) {
  let rest = null;
  for (let i = arr.length - 1; i >= 0; i--) {
    rest = {value: arr[i], rest: rest}
  }
  return rest
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, array = []) {
  // base
  if (list === null) {
    return array;
  }
  //recursion
  array.push(list.value);
  return listToArray(list.rest, array);
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
  list = {
    value: value,
    rest: list,
  }
  return list
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(rest, n, output = undefined) {
  //base
  if (n < 0) {
    return output
  }
  //recursion
  n--
  return nth(rest.rest, n, rest.value)
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(val1, val2) {
  if (typeof val1 !== 'object' && typeof val2 !== 'object') {
    return val1 === val2;
  }
  if (typeof val1 !== 'object' || typeof val2 !== 'object') {
    return false
  }
  let val1Keys = Object.keys(val1)
  let val2Keys = Object.keys(val2)

  if (val1Keys.length !== val2Keys.length) {
    return false
  }

  for (let i = 0; i < val1Keys.length; i++) {
    if (!(val2Keys.includes(val1Keys[i])) || !(deepEqual(val1[val1Keys[i]], val2[val2Keys[i]]))) {
      return false
    }
  }

  return true
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};